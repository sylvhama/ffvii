---
import clsx from "clsx";
import { Icon } from "astro-icon/components";
import Layout from "@layouts/Layout.astro";
import H2 from "@components/H2.astro";
import Breadcrumb from "@components/Breadcrumb.astro";
import Anchor from "@components/Anchor.astro";
import { Picture } from "astro:assets";
import { useTranslations, getRelativeLocaleUrl } from "@i18n/utils";
import type { CollectionEntry, CollectionKey } from "astro:content";
import { getLocaleCollection } from "@utils";

interface Props extends Pick<CollectionEntry<CollectionKey>, "data" | "id"> {
  collection: Parameters<ReturnType<typeof useTranslations>>[0];
}

const { id, data, collection } = Astro.props;

const translate = useTranslations(Astro.currentLocale!);

const { previousSlug, nextSlug, previousTitle, nextTitle } =
  await (async function () {
    const posts = await getLocaleCollection(
      collection as CollectionKey,
      Astro.currentLocale
    );
    const currentIndex = posts.findIndex((post) => {
      return id === post.id;
    });
    return {
      previousSlug: posts[currentIndex - 1]?.slug,
      previousTitle: posts[currentIndex - 1]?.data.title,
      nextSlug: posts[currentIndex + 1]?.slug,
      nextTitle: posts[currentIndex + 1]?.data.title,
    };
  })();

const getPostUrl = (slug: string) =>
  getRelativeLocaleUrl(
    Astro.currentLocale || "en",
    `${collection}/${slug.replace("fr/", "")}`
  );

const anim = (delay?: string) => ({
  old: {
    name: "fade-out",
    duration: "0.25s",
    easing: "ease-in",
  },
  new: {
    name: "left-slide",
    duration: "0.25s",
    easing: "ease-in-out",
    delay,
  },
});
---

<style is:global>
  @keyframes fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
  @keyframes left-slide {
    from {
      opacity: 0;
      transform: translateX(200px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>
<script>
  function init() {
    const inputs = document.querySelectorAll<HTMLInputElement>(
      'input[name="image"]'
    );
    const mainImages =
      document.querySelectorAll<HTMLImageElement>(".main-image");
    inputs.forEach((input) => {
      input.addEventListener("change", (event) => {
        const target = event.target as HTMLInputElement;
        const indexToShow = Number(target.value);
        if (!Number.isNaN(indexToShow)) {
          mainImages.forEach((image) => {
            image.classList.add("starting:opacity-0", "hidden");
            image.classList.remove("opacity-100");
          });
          mainImages[indexToShow].classList.remove("hidden");
          mainImages[indexToShow].classList.add("opacity-100");
          const img = mainImages[indexToShow].querySelector("img");

          if (img && img.getBoundingClientRect().top < 0) {
            img.scrollIntoView({ behavior: "smooth" });
          }
        }
      });

      const preloadResponsiveImage = (event: Event) => {
        const target = event.target as HTMLInputElement;
        const indexToShow = Number(target.value);
        if (!Number.isNaN(indexToShow) && indexToShow > 0) {
          const preloadLink = document.createElement("link");
          preloadLink.rel = "preload";
          preloadLink.as = "image";
          preloadLink.imageSrcset =
            mainImages[indexToShow].querySelector("source")!.srcset;
          document.head.appendChild(preloadLink);
        }
      };

      // we don't try to preload on focus since focus will also trigger change event
      input.addEventListener("mouseenter", preloadResponsiveImage, {
        once: true,
      });
      input.addEventListener("touchstart", preloadResponsiveImage, {
        once: true,
        passive: true,
      });
    });
  }

  init();

  document.addEventListener("astro:after-swap", init);
</script>

<Layout titlePrefix={data.title} description={data.description}>
  <Breadcrumb
    breadcrumbs={[
      {
        name: translate(collection),
        path: getRelativeLocaleUrl(
          Astro.currentLocale || "en",
          collection === "games" ? "/" : collection
        ),
      },
      { name: data.title },
    ]}
    slot="breadcrumb"
  />
  <article class="md:grid md:grid-cols-2 gap-8">
    {
      data.images.map((image, index) => (
        <Picture
          transition:name={`${id}-image`}
          class="mx-auto object-contain md:sticky top-8 rounded-md ff7:rounded-none"
          pictureAttributes={{
            class: clsx(
              "block main-image duration-500 transition-opacity",
              index > 0 && "hidden"
            ),
          }}
          width={500}
          height={500}
          src={image}
          alt={data.imagesAlt[index]}
          densities={[1.5, 2]}
          loading="eager"
        />
      ))
    }
    <div class="pt-8 md:pt-0">
      <H2 transition:name={`${id}-title`}>{data.title}</H2>
      <slot />
      {
        data.images.length > 1 ? (
          <fieldset class="pt-8">
            <legend class="sr-only">{translate("setPicture")}</legend>
            <div class="flex flex-wrap gap-4">
              {data.images.map((image, index) => (
                <label
                  transition:name={`${id}-image-${index}`}
                  transition:animate={{
                    forwards: anim(`${index * 0.08}s`),
                    backwards: anim(),
                  }}
                  aria-label={`${translate("setPictureLabel")} ${data.imagesAlt[index]}`}
                  class="relative pointer rounded-md ff7:rounded-none focus-ring"
                >
                  <input
                    class="cursor-pointer absolute opacity-0 w-full h-full z-10 peer"
                    name="image"
                    value={index}
                    type="radio"
                    checked={index === 0}
                  />
                  <Picture
                    class="rounded-md ff7:rounded-none object-contain"
                    pictureAttributes={{
                      class:
                        "block peer-checked:opacity-50 transition:opacity duration-500",
                    }}
                    width={115}
                    height={115}
                    src={image}
                    alt={data.imagesAlt[index]}
                    densities={[1.5, 2]}
                    loading="lazy"
                  />
                </label>
              ))}
            </div>
          </fieldset>
        ) : null
      }
    </div>
  </article>
  {
    previousSlug || nextSlug ? (
      <div class="pt-8 flex justify-between gap-8">
        {previousSlug ? (
          <Anchor
            classname="grid grid-cols-[auto_auto] gap-1 items-center"
            href={getPostUrl(previousSlug)}
          >
            <Icon
              name="previous"
              aria-hidden="true"
              width="1.125rem"
              height="1.125rem"
            />
            <span class="block w-full text-ellipsis overflow-hidden whitespace-nowrap">
              {previousTitle}
            </span>
          </Anchor>
        ) : (
          <div />
        )}
        {nextSlug ? (
          <Anchor
            classname="grid grid-cols-[auto_auto] gap-1 items-center"
            href={getPostUrl(nextSlug)}
          >
            <span class="block w-full max-w-max text-ellipsis overflow-hidden whitespace-nowrap">
              {nextTitle}
            </span>
            <Icon
              name="next"
              aria-hidden="true"
              width="1.125rem"
              height="1.125rem"
            />
          </Anchor>
        ) : (
          <div />
        )}
      </div>
    ) : null
  }
</Layout>
